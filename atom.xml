<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>上善若水</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-08T07:42:44.972Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>xinglunan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客图片</title>
    <link href="http://example.com/2020/11/08/Hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/"/>
    <id>http://example.com/2020/11/08/Hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87/</id>
    <published>2020-11-08T07:34:46.000Z</published>
    <updated>2020-11-08T07:42:44.972Z</updated>
    
    <content type="html"><![CDATA[<p>文章转载自<a href="https://blog.csdn.net/u012874859/article/details/108530333">https://blog.csdn.net/u012874859/article/details/108530333</a>  </p><h4 id="插入网络图片"><a href="#插入网络图片" class="headerlink" title="插入网络图片"></a>插入网络图片</h4><p>可以用常用的markdown的方式插入:<code>![img-title](img-url)</code> </p><h4 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h4><ul><li>安装插件: 在博客的根目录下执行：<br><code>npm install hexo-asset-image --save 或npm install hexo-asset-image --g</code></li><li>修改站点配置文件<code>_config.yml</code>： 找到 <code>post_asset_folder</code>，把值改成<code> true</code>，这样在执行<code>hexo new page</code> 的时候，会在<code>source/_posts</code>文件夹下生成一个和page同名的文件夹，可以存放该page中用到的图片</li><li>插入本地图片<code>![imageTitle](img.jpg)</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章转载自&lt;a href=&quot;https://blog.csdn.net/u012874859/article/details/108530333&quot;&gt;https://blog.csdn.net/u012874859/article/details/108530333&lt;/a&gt; </summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Next" scheme="http://example.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>分类与标签</title>
    <link href="http://example.com/2020/11/08/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2020/11/08/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</id>
    <published>2020-11-08T06:53:29.959Z</published>
    <updated>2020-11-08T07:45:19.249Z</updated>
    
    <content type="html"><![CDATA[<p>文章转载自<a href="https://www.jianshu.com/p/e17711e44e00">https://www.jianshu.com/p/e17711e44e00</a>  </p><h4 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1.创建“分类”选项"></a>1.创建“分类”选项</h4><h6 id="1-1-生成“分类”页并添加type属性"><a href="#1-1-生成“分类”页并添加type属性" class="headerlink" title="1.1 生成“分类”页并添加type属性"></a>1.1 生成“分类”页并添加type属性</h6><p>进入博客所在文件夹, 打开git命令行。执行命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories  </span><br></pre></td></tr></table></figure><p>成功后会提示  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~&#x2F;myblog&#x2F;source&#x2F;categories&#x2F;index.md  </span><br></pre></td></tr></table></figure><a id="more"></a>  <p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories  </span><br><span class="line">date: xxxx-xx-xx xx:xx:xx  </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: xxxx-xx-xx xx:xx:xx </span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>title后面的内容可以自己更改<br>然后保存并关闭文件  </p><h6 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h6><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: xxx表示添加这篇文章到“xxx”这个分类。<br>注意：hexo一篇文章只能属于一个分类，也就是说如果在“- xxx”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- xxx”下的 “-xxx ”分类）。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxx</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- xxx</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。  </p><h4 id="2-创建“标签”选项"><a href="#2-创建“标签”选项" class="headerlink" title="2. 创建“标签”选项"></a>2. 创建“标签”选项</h4><h6 id="2-1-生成“标签”页并添加tpye属性"><a href="#2-1-生成“标签”页并添加tpye属性" class="headerlink" title="2.1 生成“标签”页并添加tpye属性"></a>2.1 生成“标签”页并添加tpye属性</h6><p>方法与前面 <code>生成“分类”页并添加type属性</code>基本相同，只需要相应的将categories修改为tags即可<br>最后tags对应文件夹里面的index文件内容如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h6 id="2-2-给文章添加“tags”属性"><a href="#2-2-给文章添加“tags”属性" class="headerlink" title="2.2 给文章添加“tags”属性"></a>2.2 给文章添加“tags”属性</h6><p>相应笔记文件开头内容大概如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Next 主题博客搭建</span><br><span class="line">categories: </span><br><span class="line">- Hexo</span><br><span class="line">tags: </span><br><span class="line">- Next</span><br><span class="line">---  </span><br></pre></td></tr></table></figure><p>可以添加多个tags。  </p><h6 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h6><p>scaffolds文件下文件名为post的文件是新建页面的模板，通过git命令行<code>hexo new 文件名</code>创建相应笔记文件的时候会自动导入已经设好的模板。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;文章转载自&lt;a href=&quot;https://www.jianshu.com/p/e17711e44e00&quot;&gt;https://www.jianshu.com/p/e17711e44e00&lt;/a&gt;  &lt;/p&gt;
&lt;h4 id=&quot;1-创建“分类”选项&quot;&gt;&lt;a href=&quot;#1-创建“分类”选项&quot; class=&quot;headerlink&quot; title=&quot;1.创建“分类”选项&quot;&gt;&lt;/a&gt;1.创建“分类”选项&lt;/h4&gt;&lt;h6 id=&quot;1-1-生成“分类”页并添加type属性&quot;&gt;&lt;a href=&quot;#1-1-生成“分类”页并添加type属性&quot; class=&quot;headerlink&quot; title=&quot;1.1 生成“分类”页并添加type属性&quot;&gt;&lt;/a&gt;1.1 生成“分类”页并添加type属性&lt;/h6&gt;&lt;p&gt;进入博客所在文件夹, 打开git命令行。执行命令  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new page categories  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功后会提示  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO  Created: ~&amp;#x2F;myblog&amp;#x2F;source&amp;#x2F;categories&amp;#x2F;index.md  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Next" scheme="http://example.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Python安装及环境搭建</title>
    <link href="http://example.com/2020/11/08/python%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/11/08/python%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-07T16:00:00.000Z</published>
    <updated>2020-11-08T08:19:04.997Z</updated>
    
    <content type="html"><![CDATA[<p>python官网：<a href="https://www.python/">https://www.python</a>.<br>Python文档下载地址：<a href="https://www.python.org/doc/">https://www.python.org/doc/</a></p><a id="more"></a>  <h4 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h4><h6 id="Unix-amp-Linux平台安装Python"><a href="#Unix-amp-Linux平台安装Python" class="headerlink" title="Unix&amp;Linux平台安装Python"></a>Unix&amp;Linux平台安装Python</h6><blockquote><p>打开Web浏览器访问<a href="https://www.python.org/downloads/sources/">https://www.python.org/downloads/sources/</a><br>选择使用于Unix/Linux的源码压缩包<br>下载及解压压缩包<br>如果你需要自定义一些选项修改Modules/Setup<br>执行 ./configure<br>make<br>make install  </p></blockquote><p>完成以上操作后，Python会安装在/usr/local/bin目录中，Python库安装在/usr/local/lib/pythonXX，XX为你使用的Python的版本号。</p><h6 id="Windows平台安装Python"><a href="#Windows平台安装Python" class="headerlink" title="Windows平台安装Python"></a>Windows平台安装Python</h6><blockquote><p>打开 Web浏览器访问<a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a><br>在下载列表中选择Windows平添安装包，包格式为：python-XYZ.msi文件，XYZ为你要安装的版本号。<br>要使用安装程序python-XYZ.msi，Windows系统必须支持Microsoft Installer 2.0搭配使用。只要保存安装文件到本地计算机，然后运行它，看看你的机器支持msi。Windows xp和更高版本已经有msi，很多老机器也可以安装msi。<br>下载后，双击安装包，进入python安装向导，安装非常简单，你只需要使用默认的设置一直点击“下一步”知道安装完成即可。  </p></blockquote><p>注：mac下载安装教程受个人情况影响暂不做笔记。</p><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><h6 id="非Windows平台"><a href="#非Windows平台" class="headerlink" title="非Windows平台"></a>非Windows平台</h6><blockquote><p>在csh shell：输入<br>setenv PATH “$PATH:/usr/local/bin/python”<br>按下enter。<br>在bash shell(linux):输入<br>export PATH=”$PATH:/usr/local/bin/python”<br>按下enter。<br>在sh或者ksh shell： 输入<br>PATH=”$PATH:/usr/local/bin/python”<br>按下enter。  </p></blockquote><p>注意：/usr/local/bin/python 是Python的安装目录。</p><h6 id="在Windows设置环境变量"><a href="#在Windows设置环境变量" class="headerlink" title="在Windows设置环境变量"></a>在Windows设置环境变量</h6><blockquote><p>右键点击“计算机”，然后点击“属性”<br>点击“高级系统设置”<br>选择“系统变量”窗口下面的“Path”，双击即可<br>在“Path”行，添加python安装路径即可。<br>ps：路径直接用分号“；”隔开<br>设置成功后，在cmd命令行，输入命令“python”，就可以有相关显示。  </p></blockquote><h4 id="python环境变量"><a href="#python环境变量" class="headerlink" title="python环境变量"></a>python环境变量</h4><p>下面几个重要的环境变量，他应用于python：  </p><hr><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>PYTHONPATH</td><td>PYTHONPATH是python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找</td></tr><tr><td>PYTHONSTARTUP</td><td>python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td></tr><tr><td>PYTHONCASEOK</td><td>加入PYTHONCASEOK的环境变量，就会使python导入模块时不区分大小写</td></tr><tr><td>PYTHONHOME</td><td>另一种模块搜索路径。它通常内嵌于PYTHONSTARTUP或PYTHONPATH目录中，收两个模块库更容易切换。</td></tr></tbody></table><hr><h4 id="运行python"><a href="#运行python" class="headerlink" title="运行python"></a>运行python</h4><p>有三种方式可以运行python：</p><h6 id="1、交互式解释器"><a href="#1、交互式解释器" class="headerlink" title="1、交互式解释器"></a>1、交互式解释器</h6><p>你可以通过命令行窗口进入python，并在交互式解释器中开始编写python代码。你可以在unix、dos或其他提供了命令行或者shell的系统进行python代码工作。<br>以下为命令行参数：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-d</td><td>在解析时显示调试信息</td></tr><tr><td>-O</td><td>生成优化代码（.pyo文件）</td></tr><tr><td>-S</td><td>启动时不引入查找python路劲的位置</td></tr><tr><td>-V</td><td>输出python版本号</td></tr><tr><td>-X</td><td>从1.6版本之后基于内建的异常(仅仅用于字符串)已过时</td></tr><tr><td>-c cmd</td><td>执行python脚本，并将运行结果作为cmd字符串</td></tr><tr><td>file</td><td>在给定的python文件执行python脚本</td></tr></tbody></table><h6 id="2、命令行脚本"><a href="#2、命令行脚本" class="headerlink" title="2、命令行脚本"></a>2、命令行脚本</h6><p>在你看的应用程序中通过引入解释器可以在命令行执行python脚本，如下所示：</p><figure class="highlight plain"><figcaption><span>python script.py # Unix/Linux</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">或者</span><br><span class="line">C:&gt;python script.py # Windows&#x2F;DOS</span><br><span class="line">**注意：**在执行脚本是，请检查脚本是否有可执行权限。</span><br></pre></td></tr></table></figure><h6 id="3、集成开发环境（IDE：Integrated-Development-Environment-PyCharm"><a href="#3、集成开发环境（IDE：Integrated-Development-Environment-PyCharm" class="headerlink" title="3、集成开发环境（IDE：Integrated Development Environment) : PyCharm"></a>3、集成开发环境（IDE：Integrated Development Environment) : PyCharm</h6><p>Pycharm是由JetBrains打造的一款Python IDE，支持mac os、windows、linux系统。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python官网：&lt;a href=&quot;https://www.python/&quot;&gt;https://www.python&lt;/a&gt;.&lt;br&gt;Python文档下载地址：&lt;a href=&quot;https://www.python.org/doc/&quot;&gt;https://www.python.org/doc/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Next 主题博客搭建</title>
    <link href="http://example.com/2020/11/07/Next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/11/07/Next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-07T15:09:09.880Z</published>
    <updated>2020-11-08T07:52:17.968Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/11/07/Next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.jpg"><br>本文摘录自<a href="https://zhuanlan.zhihu.com/p/96641789">https://zhuanlan.zhihu.com/p/96641789</a></p><h3 id="博客搭建与配置"><a href="#博客搭建与配置" class="headerlink" title="博客搭建与配置"></a>博客搭建与配置</h3><h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><ul><li><a href="https://nodejs.org/zh-cn/">node.js</a> </li><li><a href="https://git-scm.com/">Git</a>  <a id="more"></a></li></ul><h5 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h5><p>安装 Hexo， 打开Git Bash命令窗口，输入命令：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果安装Hexo时出现下载速度特别慢的情况，可以通过修改npm的安装源解决，这里选择：  淘宝 NPM 镜像，这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装好 Hexo 后，在任意目录新建一个空文件夹，名字可以随便是啥，然后进入这个文件夹，在命令行输入命令：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>执行完成后（如果命令窗口出现橙色的 WARN 不用管,），生成文件结构：  </p><figure class="highlight plain"><figcaption><span>node_modules</span><a href="//依赖安装目录">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── scaffolds          &#x2F;&#x2F;模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br><span class="line">|   ├── draft.md         &#x2F;&#x2F;草稿模板</span><br><span class="line">|   ├── page.md          &#x2F;&#x2F;页面模板</span><br><span class="line">|   └── post.md          &#x2F;&#x2F;文章模板</span><br><span class="line">├── source             &#x2F;&#x2F;资源文件夹，用于放置图片、数据、文章等资源</span><br><span class="line">|   └── _posts           &#x2F;&#x2F;文章目录</span><br><span class="line">├── themes             &#x2F;&#x2F;主题文件夹</span><br><span class="line">|   └── landscape        &#x2F;&#x2F;默认主题</span><br><span class="line">├── .gitignore         &#x2F;&#x2F;指定不纳入git版本控制的文件</span><br><span class="line">├── _config.yml        &#x2F;&#x2F;站点配置文件</span><br><span class="line">├── db.json           </span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br></pre></td></tr></table></figure><p>下载依赖包， 输入命令：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>依赖包下载完成后，输入如下命令启动 hexo 的内置 Web 服务器：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g &#x2F;&#x2F;打包文件  </span><br><span class="line">   hexo s &#x2F;&#x2F;启动服务器  </span><br></pre></td></tr></table></figure><p>然后可以在在浏览器中通过地址 <a href="http://localhost:4000/">http://localhost:4000/</a> 访问博客了。   </p><h4 id="更换Next主题"><a href="#更换Next主题" class="headerlink" title="更换Next主题"></a>更换Next主题</h4><p>Hexo 更换主题的方式很简单，只需要将主题文件拷贝至根目录下的 themes 目录中， 然后修改根目录下<code> _config.yml</code> 文件中的 theme 字段，便可完成更换。<br>在博客项目的根目录下，输入命令：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next.git themes&#x2F;next</span><br></pre></td></tr></table></figure><p>打开根目录下 <code>_config.yml</code> 文件,将 theme 字段的值修改为 next。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>这个时候需要重启服务器 <code>hexo g &amp;&amp; hexo s</code> 并刷新才能使主题生效。  </p><h5 id="重要定义"><a href="#重要定义" class="headerlink" title="重要定义"></a>重要定义</h5><p>在项目文件中存在两个 <code>_config.yml</code> 文件，为了方便区分。  </p><ul><li>项目根目录下的 <code>_config.yml</code> 文件叫作<code>站点配置文件</code>。</li><li>主题文件夹根目录下的 <code>themes/next/_config.yml</code> 文件叫作<code>主题配置文件</code>。  <h4 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h4><h5 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h5></li><li>创建GitHub账号</li><li>创建仓库，仓库名必须是: &lt;GitHub账号名称&gt;.github.io,这是GitHub pages 的特殊命名规范<h5 id="修改站点配置文件-config-yml"><a href="#修改站点配置文件-config-yml" class="headerlink" title="修改站点配置文件_config.yml"></a>修改站点配置文件_config.yml</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">   type: &#39;git&#39;</span><br><span class="line">   repo: </span><br><span class="line">   github: https:&#x2F;&#x2F;github.com&#x2F;yifanzheng&#x2F;yifanzheng.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure><b>注意:</b> <code>GitHub pages</code>仅在<code>master</code>分支下实现  <h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5></li><li>在项目根目录下，安装 Git 部署插件:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>部署到 Github Pages  ```<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>部署完成后，在浏览器访问网址：https://&lt;GitHub 账号名称&gt;.github.io 即可查看博客。<br>详细过程可以参考：<a href="https://blog.csdn.net/weixin_39510813/article/details/80216552">借助 GitHub pages 搭建静态个人网站并绑定域名</a>  <h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4>站点配置可以查看 Hexo 官方文档。<br>Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br><b>注意:</b>所有的<code>:</code>都为英文字符，后面必须有一个空格。  <h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4>NexT 的主题配置可以先查看官方文档，写得很不错，很完善。很多配置都可以在官方文档中找到，如 文章字数统计，标签图标等。<br>NexT 官方文档：<a href="http://theme-next.iissnan.com/getting-started">http://theme-next.iissnan.com/getting-started</a><br>NexT （最新）官方文档：<a href="https://theme-next.org/docs/getting-started/">https://theme-next.org/docs/getting-started/</a>    </li></ul><h4 id="使用-Gulp-压缩静态资源"><a href="#使用-Gulp-压缩静态资源" class="headerlink" title="使用 Gulp 压缩静态资源"></a>使用 Gulp 压缩静态资源</h4><p>Gulp 是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。  </p><ul><li>安装Gulp  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure></li><li>安装Gulp插件  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装功能模块</span><br><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"></span><br><span class="line"># 额外的功能模块</span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --save</span><br></pre></td></tr></table></figure>接下来在博客项目的根目录下新建 <code>gulpfile.js</code> 文件，并复制下面的内容到文件中：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">var gulp &#x3D; require(&quot;gulp&quot;);</span><br><span class="line">var debug &#x3D; require(&quot;gulp-debug&quot;);</span><br><span class="line">var cleancss &#x3D; require(&quot;gulp-clean-css&quot;); &#x2F;&#x2F;css压缩组件</span><br><span class="line">var uglify &#x3D; require(&quot;gulp-uglify&quot;); &#x2F;&#x2F;js压缩组件</span><br><span class="line">var htmlmin &#x3D; require(&quot;gulp-htmlmin&quot;); &#x2F;&#x2F;html压缩组件</span><br><span class="line">var htmlclean &#x3D; require(&quot;gulp-htmlclean&quot;); &#x2F;&#x2F;html清理组件</span><br><span class="line">var imagemin &#x3D; require(&quot;gulp-imagemin&quot;); &#x2F;&#x2F;图片压缩组件</span><br><span class="line">var changed &#x3D; require(&quot;gulp-changed&quot;); &#x2F;&#x2F;文件更改校验组件</span><br><span class="line">var gulpif &#x3D; require(&quot;gulp-if&quot;); &#x2F;&#x2F;任务 帮助调用组件</span><br><span class="line">var plumber &#x3D; require(&quot;gulp-plumber&quot;); &#x2F;&#x2F;容错组件（发生错误不跳出任务，并报出错误内容）</span><br><span class="line">var isScriptAll &#x3D; true; &#x2F;&#x2F;是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><br><span class="line">var isDebug &#x3D; true; &#x2F;&#x2F;是否调试显示 编译通过的文件</span><br><span class="line">var gulpBabel &#x3D; require(&quot;gulp-babel&quot;);</span><br><span class="line">var es2015Preset &#x3D; require(&quot;babel-preset-es2015&quot;);</span><br><span class="line">var del &#x3D; require(&quot;del&quot;);</span><br><span class="line">var Hexo &#x3D; require(&quot;hexo&quot;);</span><br><span class="line">var hexo &#x3D; new Hexo(process.cwd(), &#123;&#125;); &#x2F;&#x2F; 初始化一个hexo对象</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 清除public文件夹</span><br><span class="line">gulp.task(&quot;clean&quot;, function() &#123;</span><br><span class="line">  return del([&quot;public&#x2F;**&#x2F;*&quot;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><br><span class="line">&#x2F;&#x2F; 创建静态页面 （等同 hexo generate）</span><br><span class="line">gulp.task(&quot;generate&quot;, function() &#123;</span><br><span class="line">  return hexo.init().then(function() &#123;</span><br><span class="line">    return hexo</span><br><span class="line">      .call(&quot;generate&quot;, &#123;</span><br><span class="line">        watch: false</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(function() &#123;</span><br><span class="line">        return hexo.exit();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(function(err) &#123;</span><br><span class="line">        return hexo.exit(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动Hexo服务器</span><br><span class="line">gulp.task(&quot;server&quot;, function() &#123;</span><br><span class="line">  return hexo</span><br><span class="line">    .init()</span><br><span class="line">    .then(function() &#123;</span><br><span class="line">      return hexo.call(&quot;server&quot;, &#123;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function(err) &#123;</span><br><span class="line">      console.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 部署到服务器</span><br><span class="line">gulp.task(&quot;deploy&quot;, function() &#123;</span><br><span class="line">  return hexo.init().then(function() &#123;</span><br><span class="line">    return hexo</span><br><span class="line">      .call(&quot;deploy&quot;, &#123;</span><br><span class="line">        watch: false</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(function() &#123;</span><br><span class="line">        return hexo.exit();</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(function(err) &#123;</span><br><span class="line">        return hexo.exit(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩public目录下的js文件</span><br><span class="line">gulp.task(&quot;compressJs&quot;, function() &#123;</span><br><span class="line">  return gulp</span><br><span class="line">    .src([&quot;.&#x2F;public&#x2F;**&#x2F;*.js&quot;, &quot;!.&#x2F;public&#x2F;libs&#x2F;**&quot;]) &#x2F;&#x2F;排除的js</span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&quot;)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress JS:&quot; &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(</span><br><span class="line">      gulpBabel(&#123;</span><br><span class="line">        presets: [es2015Preset] &#x2F;&#x2F; es5检查机制</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(uglify()) &#x2F;&#x2F;调用压缩组件方法uglify(),对合并的文件进行压缩</span><br><span class="line">    .pipe(gulp.dest(&quot;.&#x2F;public&quot;)); &#x2F;&#x2F;输出到目标目录</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩public目录下的css文件</span><br><span class="line">gulp.task(&quot;compressCss&quot;, function() &#123;</span><br><span class="line">  var option &#x3D; &#123;</span><br><span class="line">    rebase: false,</span><br><span class="line">    &#x2F;&#x2F;advanced: true,               &#x2F;&#x2F;类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span><br><span class="line">    compatibility: &quot;ie7&quot; &#x2F;&#x2F;保留ie7及以下兼容写法 类型：String 默认：&#39;&#39;or&#39;*&#39; [启用兼容模式； &#39;ie7&#39;：IE7兼容模式，&#39;ie8&#39;：IE8兼容模式，&#39;*&#39;：IE9+兼容模式]</span><br><span class="line">    &#x2F;&#x2F;keepBreaks: true,             &#x2F;&#x2F;类型：Boolean 默认：false [是否保留换行]</span><br><span class="line">    &#x2F;&#x2F;keepSpecialComments: &#39;*&#39;      &#x2F;&#x2F;保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span><br><span class="line">  &#125;;</span><br><span class="line">  return gulp</span><br><span class="line">    .src([&quot;.&#x2F;public&#x2F;**&#x2F;*.css&quot;, &quot;!.&#x2F;public&#x2F;**&#x2F;*.min.css&quot;]) &#x2F;&#x2F;排除的css</span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&quot;)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress CSS:&quot; &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(cleancss(option))</span><br><span class="line">    .pipe(gulp.dest(&quot;.&#x2F;public&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩public目录下的html文件</span><br><span class="line">gulp.task(&quot;compressHtml&quot;, function() &#123;</span><br><span class="line">  var cleanOptions &#x3D; &#123;</span><br><span class="line">    protect: &#x2F;&lt;\!--%fooTemplate\b.*?%--&gt;&#x2F;g, &#x2F;&#x2F;忽略处理</span><br><span class="line">    unprotect: &#x2F;&lt;script [^&gt;]*\btype&#x3D;&quot;text\&#x2F;x-handlebars-template&quot;[\s\S]+?&lt;\&#x2F;script&gt;&#x2F;gi &#x2F;&#x2F;特殊处理</span><br><span class="line">  &#125;;</span><br><span class="line">  var minOption &#x3D; &#123;</span><br><span class="line">    collapseWhitespace: true, &#x2F;&#x2F;压缩HTML</span><br><span class="line">    collapseBooleanAttributes: true, &#x2F;&#x2F;省略布尔属性的值  &lt;input checked&#x3D;&quot;true&quot;&#x2F;&gt; &#x3D;&#x3D;&gt; &lt;input &#x2F;&gt;</span><br><span class="line">    removeEmptyAttributes: true, &#x2F;&#x2F;删除所有空格作属性值    &lt;input id&#x3D;&quot;&quot; &#x2F;&gt; &#x3D;&#x3D;&gt; &lt;input &#x2F;&gt;</span><br><span class="line">    removeScriptTypeAttributes: true, &#x2F;&#x2F;删除&lt;script&gt;的type&#x3D;&quot;text&#x2F;javascript&quot;</span><br><span class="line">    removeStyleLinkTypeAttributes: true, &#x2F;&#x2F;删除&lt;style&gt;和&lt;link&gt;的type&#x3D;&quot;text&#x2F;css&quot;</span><br><span class="line">    removeComments: true, &#x2F;&#x2F;清除HTML注释</span><br><span class="line">    minifyJS: true, &#x2F;&#x2F;压缩页面JS</span><br><span class="line">    minifyCSS: true, &#x2F;&#x2F;压缩页面CSS</span><br><span class="line">    minifyURLs: true &#x2F;&#x2F;替换页面URL</span><br><span class="line">  &#125;;</span><br><span class="line">  return gulp</span><br><span class="line">    .src(&quot;.&#x2F;public&#x2F;**&#x2F;*.html&quot;)</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress HTML:&quot; &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(htmlclean(cleanOptions))</span><br><span class="line">    .pipe(htmlmin(minOption))</span><br><span class="line">    .pipe(gulp.dest(&quot;.&#x2F;public&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 压缩 public&#x2F;uploads 目录内图片</span><br><span class="line">gulp.task(&quot;compressImage&quot;, function() &#123;</span><br><span class="line">  var option &#x3D; &#123;</span><br><span class="line">    optimizationLevel: 5, &#x2F;&#x2F;类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">    progressive: true, &#x2F;&#x2F;类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">    interlaced: false, &#x2F;&#x2F;类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">    multipass: false &#x2F;&#x2F;类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">  &#125;;</span><br><span class="line">  return gulp</span><br><span class="line">    .src(&quot;.&#x2F;public&#x2F;medias&#x2F;**&#x2F;*.*&quot;)</span><br><span class="line">    .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&#x2F;medias&quot;)))</span><br><span class="line">    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress Images:&quot; &#125;)))</span><br><span class="line">    .pipe(plumber())</span><br><span class="line">    .pipe(imagemin(option))</span><br><span class="line">    .pipe(gulp.dest(&quot;.&#x2F;public&quot;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span><br><span class="line">gulp.task(</span><br><span class="line">  &quot;build&quot;,</span><br><span class="line">  gulp.series(</span><br><span class="line">    &quot;clean&quot;,</span><br><span class="line">    &quot;generate&quot;,</span><br><span class="line">    &quot;compressHtml&quot;,</span><br><span class="line">    &quot;compressCss&quot;,</span><br><span class="line">    &quot;compressJs&quot;,</span><br><span class="line">    &quot;compressImage&quot;,</span><br><span class="line">    gulp.parallel(&quot;deploy&quot;)</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 默认任务</span><br><span class="line">gulp.task(</span><br><span class="line">  &quot;default&quot;,</span><br><span class="line">  gulp.series(</span><br><span class="line">    &quot;clean&quot;,</span><br><span class="line">    &quot;generate&quot;,</span><br><span class="line">    gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressImage&quot;, &quot;compressJs&quot;)</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line">&#x2F;&#x2F;Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数  </span><br></pre></td></tr></table></figure>以后在部署时，只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩，压缩完成后执行 deploy 命令同步到服务器：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>更多第三方功能安装详见Hexo官方文档</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2020/11/07/Next%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.jpg&quot;&gt;&lt;br&gt;本文摘录自&lt;a href=&quot;https://zhuanlan.zhihu.com/p/96641789&quot;&gt;https://zhuanlan.zhihu.com/p/96641789&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;博客搭建与配置&quot;&gt;&lt;a href=&quot;#博客搭建与配置&quot; class=&quot;headerlink&quot; title=&quot;博客搭建与配置&quot;&gt;&lt;/a&gt;博客搭建与配置&lt;/h3&gt;&lt;h5 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/zh-cn/&quot;&gt;node.js&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Next" scheme="http://example.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Markdown教程</title>
    <link href="http://example.com/2020/11/04/markdown%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2020/11/04/markdown%E6%95%99%E7%A8%8B/</id>
    <published>2020-11-04T15:49:55.626Z</published>
    <updated>2020-11-07T16:55:05.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h2><p>Markdown 标题有两种格式。</p><h5 id="1、使用-和-标记一级和二级标题"><a href="#1、使用-和-标记一级和二级标题" class="headerlink" title="1、使用 = 和 - 标记一级和二级标题"></a>1、使用 = 和 - 标记一级和二级标题</h5><p>= 和 - 标记语法结构如下：  </p><h1 id="我展示的是一级标题"><a href="#我展示的是一级标题" class="headerlink" title="我展示的是一级标题"></a><code>我展示的是一级标题</code></h1><h2 id="我展示的是二级标题"><a href="#我展示的是二级标题" class="headerlink" title="我展示的是二级标题"></a><code>我展示的是二级标题</code></h2><hr><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/MarkdownTitle1.jpg" alt="标题1">  </p><a id="more"></a><h4 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h4><p>使用 # 号可表示1-6级标题， 一级标题对应一个 # 号， 二级标题对应两个 # 号，以此类推。 </p><p><code># 一级标题</code><br><code>## 二级标题</code><br><code>### 三级标题</code><br><code>#### 四级标题</code><br><code>##### 五级标题</code><br><code>###### 六级标题</code>  </p><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/mdtitle2.gif" alt="标题二">  </p><h2 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h2><p>Markdown 段落没有特殊的格式， 直接编写文字就可以了，<strong>段落的换行是使用两个以上的空格＋回车</strong>。<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md3.jpg"><br>也可以使用在段落后面使用一个空行的方式来表示重新开始一个段落。<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md4.jpg">  </p><hr><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>Markdown 可以使用以下几种字体：<br><code>*斜体文本*</code><br><code>_斜体文本_</code><br><code>**粗体文本**</code><br><code>__粗体文本__</code><br><code>***粗斜体文本***</code><br><code>___粗斜体文本___</code>  </p><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md5.gif">  </p><hr><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>  你可以在一行中用三个以上的行行好、减号、底线来建立一个分割线， 行内不能有其他东西。 你也可以在星号或是减号中间插入空格。 下面每种写法都可以建立分割线：<br>  <code>***</code><br>  <code>* * *</code><br>  <code>*****</code><br>  <code>- - -</code><br>  <code>---------</code><br>  显示效果如下：<br>  <img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md6.jpg">   </p><hr><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>如果段落上的文字要添加删除线， 只需要在文字的两端加上两个波浪线 <code>~~</code> 即可，实例如下：<br> <code>RUNOOB.COM</code><br> <code>GOOGLE.COM</code><br> <code>~~BAIDU.COM~~</code><br> 显示效果如下：<br> <img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md7.jpg">  </p><hr><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>下划线可以通过HTML的标签<code>&lt;u&gt;</code>来实现：<br><code>&lt;u&gt;</code>带下划线文本<code>&lt;/u&gt;</code><br>显示效果如下：<br>  <img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md8.jpg">  </p><hr><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>脚注是对文本的补充说明。<br>Markdown 脚注的格式如下：<br><code>[^要注明的文本]</code><br>实例演示如下：<br>创建脚注的格式类似这样<a href="%E8%8F%9C%E9%B8%9F%E6%95%99%E7%A8%8B">^RUNOOB</a>。  </p><h2 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h2><p>Markdown 支持有序列表和无需列表。<br>无序列表使用(*)、(+)或(-)作为列表标记：<br>*第一项<br>*第二项<br>*第三项  </p><p>+第一项<br>+第二项<br>+第三项  </p><p>-第一项<br>-第二项<br>-第三项  </p><p>有序列表使用数字并加上.号来表示，如：<br>1.第一项<br>2.第二项<br>3.第三项<br>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md9.jpg">  </p><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套只需在字列表中的选项添加四个空格即可：  </p><ol><li>第一项：<ul><li>第一项嵌套的第一个元件元素  </li><li>第一项的第二个嵌套元素  </li></ul></li><li>第二项：<ul><li>第二项的第一个嵌套元素  </li><li>第二项的第二个嵌套元素    </li></ul></li></ol><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md10.jpg">   </p><h2 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h2><p>  Markdown 区块引用是在段落开头使用 &gt; 符号，然后后面紧跟一个空格符号：  </p><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想  </p></blockquote><p>  显示效果如上：<br>  另外区块是可以嵌套的，一个 &gt; 符号是最外层， 两个 &gt; 符号是第一层的嵌套，以此类推：</p><blockquote><p>最外层  </p><blockquote><p>第一层嵌套  </p><blockquote><p>第二层嵌套<br>  显示效果如上：  </p></blockquote></blockquote></blockquote><h4 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h4><p>  区块中使用列表实例如下：</p><blockquote><p>区块中使用列表<br>1.第一项<br>2.第二项  </p><ul><li>第一项  </li><li>第二项  </li><li>第三项<br>显示效果如上：  </li></ul></blockquote><h4 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h4><p>  如果要在列表项目内放进区块，那么需要在 &gt; 前添加四个空格的缩进。<br>  区块中使用列表示例如下：  </p><ul><li>第一项  <blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想  </p></blockquote></li><li>第二项  </li></ul><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md11.jpg">  </p><h2 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h2><h3 id="Markdown-代码-1"><a href="#Markdown-代码-1" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h3><p>  如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：  </p><pre><code>`printf()`函数  </code></pre><p>  显示效果如下：<br>  <img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md12.jpg">  </p><h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p>  代码区块使用4个空格或者一个制表符（Tab键）。<br>  实例如下：<br>  <img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md13.jpg"><br>  显示效果如下：<br>  <img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md14.jpg">   </p><p>  你也可以用```包裹一段代码，并指定一种语言（也可以不指定）：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">`RUNOOB`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>  显示效果如上：  </p><h2 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h2><h3 id="Markdown-链接-1"><a href="#Markdown-链接-1" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h3><p>链接使用方法如下：<br><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a>  </p><p>或者  </p><p>&lt;链接地址&gt;  </p><p>例如：  </p><p>这是一个链接 <a href="https:?/www.runoob.com">菜鸟教程</a><br>显示效果如上：  </p><p>直接使用链接地址：  </p><p><a href="https://www.runoob.com/">https://www.runoob.com</a><br>显示效果如下：</p><p><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md15.jpg">  </p><h4 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h4><p>我们可以通过变量来设置一个链接，变量复制在文档末尾进行：  </p><p>  这个链接用 1 作为网址变量<a href="http://www.baidu.com/">Baidu</a><br>  这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>  然后在文档的结尾为变量赋值（网址）  </p><h2 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h2><h3 id="Markdown-图片-1"><a href="#Markdown-图片-1" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h3><p>Markdown 图片语法格式如下：  </p><p> <code>![alt 属性文本](图片地址) </code> </p><p><code>![alt 属性文本](图片地址“可选标题”) </code> </p><ul><li>开头一个感叹号 ！  </li><li>接着一个方括号，里面放上图片的替代文字  </li><li>接着一个普通括号，里卖弄放上图片的网址，最后还可以用引号包住并加上选择性的’title’属性的文字。  </li></ul><p>使用实列：<br>  <code>![Runoob 图标](http://static,runoob.com/images/runoob-logo.png)  </code></p><p>  <code>![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;)</code>  </p><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md16.jpg">  </p><p>当然，你也可以向网址那样对图片网址使用变量：<br>  <code>这个链接用 1 作为网址变量 [RUNOOB][1].</code><br>  <code>然后在文档的结尾为变量赋值（网址）</code>  </p><p>  <code>[1]:http://static.runoob.com/images/runoob-logo.png</code>  </p><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md17.jpg">  </p><p>Markdown 还没有办法指定土拍你的高度和宽度，如果你需要的话，你可以使用普通的<img>标签。  </p><p>  <code>&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot;&gt;</code>  </p><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md18.jpg">  </p><h2 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h2><h3 id="Markdown-表格-1"><a href="#Markdown-表格-1" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h3><p>  Markdown 制作表格使用 | 还分个不同的单元格， 使用 - 来分割表头和其他行。<br>  语法格式如下：  </p><pre><code>| 表头 | 表头 |  | ---- | ---- |  | 单元格 | 单元格 |  | 单元格 | 单元格 |  </code></pre><p>显示效果如下：<br><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md19.jpg">  </p><p>对齐方式  </p><h4 id="我们设置表格的对齐方式："><a href="#我们设置表格的对齐方式：" class="headerlink" title="我们设置表格的对齐方式："></a>我们设置表格的对齐方式：</h4><ul><li><p>-: 设置内容和标题烂右对齐。  </p></li><li><p> :- 设置内容和标题栏左对齐。  </p></li><li><p>:-: 设置内容和标题居中对齐。  </p><p>实例如下：  </p><p><code>| 左对齐 | 右对齐 | 居中对齐 |</code><br><code>| :----- | ----: | :----: |</code><br><code>| 单元格 | 单元格 | 单元格 |</code><br><code>| 单元格 | 单元格 | 单元格 |</code>    </p><p>显示效果如下：  </p><table><thead><tr><th align="left">左 对 齐 - - -</th><th align="right">- - - 右 对 齐</th><th align="center">居 - 中 - 对 - 齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table></li></ul><h3 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h3><h4 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h4><p>不支持Markdown 涵盖范围之内的标签， 都可以直接在文档里卖弄用HTML撰写。<br>目前支持的HTML元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等，如：  </p><p><code>使用&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt;重启电脑</code><br>显示效果如下：  </p><p>使用<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>重启电脑  </p><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown使用反斜杠（’/‘）转义特殊字符：  </p><p>  <code>**文本加粗**</code><br>  <code>\*\*正常显示星号\*\*</code>  </p><p>  输出结果为：<br>  <strong>文本加粗</strong><br>  ** 正常显示星号 **  </p><p>  Markdown 支持以下这些字符前面加上反斜杠来帮助插入普通的符号：  </p><pre><code>\   反斜线  `   反引号  *   星号  _   下划线  &#123;&#125;  花括号  []  方括号  ()  小括号  #   井字号  +   加号  —   减号  .   英文句点  !   感叹号  </code></pre><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>  当你需要在编辑其中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后， 问答和文章会根据需要加载Mathjax 对数学公式进行渲染。如：  </p><p>  <code>$$</code><br>  <code>\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 = \begin&#123;vmatrix&#125;</code><br>  <code>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</code><br>  <code>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</code><br>  <code>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\ </code><br>  <code>\end&#123;vmatrix&#125;</code><br>  <code>$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</code><br>  <code>$$</code><br>输出结果为：  </p><p><img src="/2020/11/04/markdown%E6%95%99%E7%A8%8B/md21.jpg">  </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Markdown标题&quot;&gt;&lt;a href=&quot;#Markdown标题&quot; class=&quot;headerlink&quot; title=&quot;Markdown标题&quot;&gt;&lt;/a&gt;Markdown标题&lt;/h2&gt;&lt;p&gt;Markdown 标题有两种格式。&lt;/p&gt;
&lt;h5 id=&quot;1、使用-和-标记一级和二级标题&quot;&gt;&lt;a href=&quot;#1、使用-和-标记一级和二级标题&quot; class=&quot;headerlink&quot; title=&quot;1、使用 = 和 - 标记一级和二级标题&quot;&gt;&lt;/a&gt;1、使用 = 和 - 标记一级和二级标题&lt;/h5&gt;&lt;p&gt;= 和 - 标记语法结构如下：  &lt;/p&gt;
&lt;h1 id=&quot;我展示的是一级标题&quot;&gt;&lt;a href=&quot;#我展示的是一级标题&quot; class=&quot;headerlink&quot; title=&quot;我展示的是一级标题&quot;&gt;&lt;/a&gt;&lt;code&gt;我展示的是一级标题&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;我展示的是二级标题&quot;&gt;&lt;a href=&quot;#我展示的是二级标题&quot; class=&quot;headerlink&quot; title=&quot;我展示的是二级标题&quot;&gt;&lt;/a&gt;&lt;code&gt;我展示的是二级标题&lt;/code&gt;&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;显示效果如下：&lt;br&gt;&lt;img src=&quot;/2020/11/04/markdown%E6%95%99%E7%A8%8B/MarkdownTitle1.jpg&quot; alt=&quot;标题1&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="markdown" scheme="http://example.com/categories/markdown/"/>
    
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/11/03/hello-world/"/>
    <id>http://example.com/2020/11/03/hello-world/</id>
    <published>2020-11-03T14:00:28.559Z</published>
    <updated>2020-11-03T14:00:28.559Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
